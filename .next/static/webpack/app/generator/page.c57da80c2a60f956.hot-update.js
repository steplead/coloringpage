"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/generator/page",{

/***/ "(app-pages-browser)/./src/lib/imageProcessing.ts":
/*!************************************!*\
  !*** ./src/lib/imageProcessing.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeColoringPageQuality: function() { return /* binding */ analyzeColoringPageQuality; },\n/* harmony export */   assessImageQuality: function() { return /* binding */ assessImageQuality; },\n/* harmony export */   enhancePrompt: function() { return /* binding */ enhancePrompt; },\n/* harmony export */   getCategoryNegativePrompts: function() { return /* binding */ getCategoryNegativePrompts; },\n/* harmony export */   getOptimalSeedRange: function() { return /* binding */ getOptimalSeedRange; },\n/* harmony export */   getOptimizedParams: function() { return /* binding */ getOptimizedParams; },\n/* harmony export */   getSuggestedPromptEnhancements: function() { return /* binding */ getSuggestedPromptEnhancements; },\n/* harmony export */   optimizeImage: function() { return /* binding */ optimizeImage; },\n/* harmony export */   recursivePromptOptimization: function() { return /* binding */ recursivePromptOptimization; }\n/* harmony export */ });\n/**\n * Image Processing Service for Coloring Pages\n * \n * This service handles image optimization specifically for coloring pages\n * - Ensures clean black outlines on white background\n * - Optimizes for printing\n * - Provides image analysis and enhancement\n */ /**\n * Image processing utility functions for AI coloring page generation\n */ /**\n * Get optimal seed range for specific content types\n * Different seed ranges produce better results for different content types\n */ function getOptimalSeedRange(category) {\n    const seedRanges = {\n        animals: [\n            120000,\n            140000\n        ],\n        nature: [\n            140000,\n            160000\n        ],\n        fantasy: [\n            160000,\n            180000\n        ],\n        vehicles: [\n            180000,\n            200000\n        ],\n        patterns: [\n            200000,\n            220000\n        ],\n        default: [\n            100000,\n            999999\n        ]\n    };\n    return seedRanges[category] || seedRanges.default;\n}\n/**\n * Get optimized parameters for specific image types\n */ function getOptimizedParams(complexity) {\n    const baseParams = {\n        num_inference_steps: 30,\n        guidance_scale: 7.5\n    };\n    const complexityParams = {\n        simple: {\n            num_inference_steps: 28,\n            guidance_scale: 7.0\n        },\n        medium: baseParams,\n        detailed: {\n            num_inference_steps: 32,\n            guidance_scale: 8.2\n        }\n    };\n    return complexityParams[complexity] || baseParams;\n}\n/**\n * Get category-specific negative prompts to improve generation quality\n */ function getCategoryNegativePrompts(category) {\n    const baseNegative = \"photo, realistic, shading, grayscale, gradient, 3d, color, watercolor, painting, crosshatching, complex texture, busy background\";\n    const categoryNegatives = {\n        animals: \"\".concat(baseNegative, \", human, people, text, realistic fur, realistic eyes\"),\n        nature: \"\".concat(baseNegative, \", people, buildings, vehicles, complex patterns\"),\n        fantasy: \"\".concat(baseNegative, \", realistic, modern, urban, technical\"),\n        vehicles: \"\".concat(baseNegative, \", organic shapes, people, animals, nature\"),\n        patterns: \"\".concat(baseNegative, \", specific objects, scenes, figures\"),\n        default: baseNegative\n    };\n    return categoryNegatives[category] || categoryNegatives.default;\n}\n/**\n * Get suggested prompt enhancements based on user input\n */ function getSuggestedPromptEnhancements(userPrompt) {\n    const suggestions = [];\n    // Check for common improvement opportunities\n    if (userPrompt.length < 10) {\n        suggestions.push(\"Add more details to your description for better results\");\n    }\n    if (!userPrompt.toLowerCase().includes(\"background\")) {\n        suggestions.push(\"Consider describing the background or setting\");\n    }\n    if (!userPrompt.match(/position|pose|standing|sitting/i)) {\n        suggestions.push(\"Specify the position or pose of the main subject\");\n    }\n    // Add general suggestions if no specific ones were found\n    if (suggestions.length === 0) {\n        suggestions.push(\"Try adding adjectives to describe the mood or style\");\n        suggestions.push(\"Consider specifying the perspective (e.g., front view, side view)\");\n    }\n    return suggestions;\n}\n// Function to determine if an image has good contrast for coloring\nfunction analyzeColoringPageQuality(imageData) {\n    // This would normally use canvas and image processing libraries\n    // For demonstration, we're providing a simulated analysis\n    // In a real implementation, this would:\n    // 1. Measure the contrast between lines and background\n    // 2. Check for presence of grayscale elements (should be pure black/white)\n    // 3. Analyze line thickness and consistency\n    // 4. Evaluate balance of white space vs. coloring areas\n    // Simulated score between 0-100\n    const score = 85;\n    const feedback = [\n        \"Good contrast between lines and background\",\n        \"Clean black outlines detected\",\n        \"Appropriate line thickness for coloring\",\n        \"Good balance of detail and open spaces\"\n    ];\n    return {\n        score,\n        feedback\n    };\n}\n// 提示词增强引擎\nfunction enhancePrompt(basePrompt, category) {\n    const styleModifiers = {\n        animals: \"(lineart:1.2), (clean lines:1.1), (single line thickness:1.05), simplified animal drawing\",\n        nature: \"(lineart:1.2), (clean lines:1.1), (botanical illustration:1.05)\",\n        fantasy: \"(lineart:1.2), (clean lines:1.1), (storybook illustration:1.05)\",\n        vehicles: \"(lineart:1.2), (clean lines:1.1), (technical drawing:1.05)\",\n        patterns: \"(lineart:1.2), (clean lines:1.1), (geometric pattern:1.05)\",\n        default: \"(lineart:1.2), (clean lines:1.1), (single line thickness:1.05)\"\n    };\n    return \"\".concat(basePrompt, \" \").concat(styleModifiers[category] || styleModifiers.default);\n}\n// 图像后处理优化\nasync function optimizeImage(imageData) {\n    // 这里将来可以添加实际的图像处理逻辑\n    // 例如：边缘检测、背景纯白化、线条黑化等\n    return imageData;\n}\n// 递归提示优化\nfunction recursivePromptOptimization(basePrompt, previousResults) {\n    let attempts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    const maxAttempts = 3;\n    if (attempts >= maxAttempts) {\n        return basePrompt;\n    }\n    // 基于之前的结果调整提示词\n    let optimizedPrompt = basePrompt;\n    if (previousResults.length > 0) {\n        // 这里可以添加基于之前结果的优化逻辑\n        optimizedPrompt += \" (high quality:1.2), (clear lines:1.1)\";\n    }\n    return optimizedPrompt;\n}\n// 图像质量评估\nfunction assessImageQuality(imageData) {\n    return new Promise((resolve)=>{\n        // 这里将来可以添加实际的质量评估逻辑\n        // 返回0-10的质量分数\n        resolve(8.5);\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/imageProcessing.ts\n"));

/***/ })

});