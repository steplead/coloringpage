"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate/route";
exports.ids = ["app/api/generate/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate%2Froute&page=%2Fapi%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Froute.ts&appDir=%2FUsers%2Fbruno2025%2FDocuments%2FiProjects%2Fcoloringpage%2Fcoloringpage%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbruno2025%2FDocuments%2FiProjects%2Fcoloringpage%2Fcoloringpage&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate%2Froute&page=%2Fapi%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Froute.ts&appDir=%2FUsers%2Fbruno2025%2FDocuments%2FiProjects%2Fcoloringpage%2Fcoloringpage%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbruno2025%2FDocuments%2FiProjects%2Fcoloringpage%2Fcoloringpage&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_bruno2025_Documents_iProjects_coloringpage_coloringpage_src_app_api_generate_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/generate/route.ts */ \"(rsc)/./src/app/api/generate/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate/route\",\n        pathname: \"/api/generate\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate/route\"\n    },\n    resolvedPagePath: \"/Users/bruno2025/Documents/iProjects/coloringpage/coloringpage/src/app/api/generate/route.ts\",\n    nextConfigOutput,\n    userland: _Users_bruno2025_Documents_iProjects_coloringpage_coloringpage_src_app_api_generate_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generate/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZ2VuZXJhdGUlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZnZW5lcmF0ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmJydW5vMjAyNSUyRkRvY3VtZW50cyUyRmlQcm9qZWN0cyUyRmNvbG9yaW5ncGFnZSUyRmNvbG9yaW5ncGFnZSUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZicnVubzIwMjUlMkZEb2N1bWVudHMlMkZpUHJvamVjdHMlMkZjb2xvcmluZ3BhZ2UlMkZjb2xvcmluZ3BhZ2UmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzRDO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29sb3JpbmdwYWdlLz85ZTBjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9icnVubzIwMjUvRG9jdW1lbnRzL2lQcm9qZWN0cy9jb2xvcmluZ3BhZ2UvY29sb3JpbmdwYWdlL3NyYy9hcHAvYXBpL2dlbmVyYXRlL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9nZW5lcmF0ZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9nZW5lcmF0ZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9icnVubzIwMjUvRG9jdW1lbnRzL2lQcm9qZWN0cy9jb2xvcmluZ3BhZ2UvY29sb3JpbmdwYWdlL3NyYy9hcHAvYXBpL2dlbmVyYXRlL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9nZW5lcmF0ZS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate%2Froute&page=%2Fapi%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Froute.ts&appDir=%2FUsers%2Fbruno2025%2FDocuments%2FiProjects%2Fcoloringpage%2Fcoloringpage%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbruno2025%2FDocuments%2FiProjects%2Fcoloringpage%2Fcoloringpage&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/generate/route.ts":
/*!***************************************!*\
  !*** ./src/app/api/generate/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   POST_old: () => (/* binding */ POST_old)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_imageProcessing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/imageProcessing */ \"(rsc)/./src/lib/imageProcessing.ts\");\n/* harmony import */ var _lib_queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/queue */ \"(rsc)/./src/lib/queue.ts\");\n\n\n\n// SiliconFlow API configuration\nconst API_KEY = process.env.SILICONFLOW_API_KEY || \"sk-frjnkxrmiaajoxjziaqgwmyorlermfnpbctcchsvazrlxeah\";\nconst API_URL = process.env.SILICONFLOW_API_URL || \"https://api.siliconflow.cn/v1/images/generations\";\nconst MODEL = process.env.SILICONFLOW_MODEL || \"black-forest-labs/FLUX.1-schnell\";\n// 基础提示词模板\nconst BASE_PROMPT = `Create a clean black outline coloring page with the following characteristics:\n- Only simple black lines on white background\n- No shading, grayscale, or color\n- Clear distinct lines suitable for coloring\n- Clean and minimalist design\n- No text or labels\n- Perfect for printing and coloring with crayons or markers\nSubject: `;\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        // 验证请求\n        if (!body.prompt) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Prompt is required\"\n            }, {\n                status: 400\n            });\n        }\n        // 添加任务到队列\n        const jobId = await _lib_queue__WEBPACK_IMPORTED_MODULE_2__.imageQueue.addTask(body);\n        // 返回任务ID，客户端可以使用此ID轮询状态\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            jobId\n        });\n    } catch (error) {\n        console.error(\"Error in generate route:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// 获取任务状态的端点\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const jobId = searchParams.get(\"jobId\");\n        if (!jobId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Job ID is required\"\n            }, {\n                status: 400\n            });\n        }\n        const status = await _lib_queue__WEBPACK_IMPORTED_MODULE_2__.imageQueue.getStatus(jobId);\n        if (!status) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Job not found\"\n            }, {\n                status: 404\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(status);\n    } catch (error) {\n        console.error(\"Error in status route:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST_old(request) {\n    try {\n        // 解析请求数据\n        const body = await request.json();\n        const { description, complexity, style, category = \"default\" } = body;\n        if (!description) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Description is required\"\n            }, {\n                status: 400\n            });\n        }\n        // 构建基础提示词\n        let basePrompt = `${BASE_PROMPT}${description}`;\n        // 根据复杂度调整提示词\n        const complexityModifiers = {\n            simple: \"with very simple shapes and minimal details, perfect for young children, \",\n            detailed: \"with intricate details and more complex elements, \",\n            medium: \"with moderate level of detail, \"\n        };\n        basePrompt += complexityModifiers[complexity] || complexityModifiers.medium;\n        // 根据风格调整提示词\n        const styleModifiers = {\n            cartoon: \"in a fun cartoon style, \",\n            realistic: \"with realistic proportions but still as a line drawing, \",\n            abstract: \"in an abstract artistic style, \",\n            geometric: \"using geometric shapes and patterns, \",\n            standard: \"\"\n        };\n        basePrompt += styleModifiers[style] || styleModifiers.standard;\n        // 使用提示词增强引擎优化提示词\n        const enhancedPrompt = (0,_lib_imageProcessing__WEBPACK_IMPORTED_MODULE_1__.enhancePrompt)(basePrompt, category);\n        // 获取类别特定的负面提示词\n        const negativePrompt = (0,_lib_imageProcessing__WEBPACK_IMPORTED_MODULE_1__.getCategoryNegativePrompts)(category);\n        // 获取最优种子范围\n        const [minSeed, maxSeed] = (0,_lib_imageProcessing__WEBPACK_IMPORTED_MODULE_1__.getOptimalSeedRange)(category);\n        const seed = Math.floor(Math.random() * (maxSeed - minSeed)) + minSeed;\n        // 获取优化的生成参数\n        const optimizedParams = (0,_lib_imageProcessing__WEBPACK_IMPORTED_MODULE_1__.getOptimizedParams)(complexity);\n        console.log(\"Generating image with prompt:\", enhancedPrompt);\n        console.log(\"Negative prompt:\", negativePrompt);\n        // 准备API请求参数\n        const payload = {\n            model: MODEL,\n            prompt: enhancedPrompt,\n            negative_prompt: negativePrompt,\n            seed,\n            ...optimizedParams\n        };\n        // 调用SiliconFlow API\n        const response = await fetch(API_URL, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${API_KEY}`\n            },\n            body: JSON.stringify(payload)\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error(\"API error:\", errorData);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to generate image from API\",\n                details: errorData\n            }, {\n                status: response.status\n            });\n        }\n        const data = await response.json();\n        // 获取生成的图像数据\n        const imageResponse = await fetch(data.data[0].url);\n        const imageBlob = await imageResponse.blob();\n        // 优化生成的图像\n        const optimizedImageBlob = await (0,_lib_imageProcessing__WEBPACK_IMPORTED_MODULE_1__.optimizeImage)(imageBlob);\n        // 评估图像质量\n        const qualityScore = await (0,_lib_imageProcessing__WEBPACK_IMPORTED_MODULE_1__.assessImageQuality)(optimizedImageBlob);\n        // 如果质量分数低于阈值，尝试使用递归提示优化重新生成\n        if (qualityScore < 7.0) {\n            const optimizedPrompt = (0,_lib_imageProcessing__WEBPACK_IMPORTED_MODULE_1__.recursivePromptOptimization)(enhancedPrompt, [\n                data.data[0].url\n            ]);\n        // 这里可以添加重新生成的逻辑\n        }\n        // 返回生成结果\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            prompt: enhancedPrompt,\n            imageUrl: data.data[0].url,\n            message: \"Image generated successfully\",\n            qualityScore\n        });\n    } catch (error) {\n        console.error(\"Error generating image:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to generate image\",\n            details: error instanceof Error ? error.message : String(error)\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/generate/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/apiGateway.ts":
/*!*******************************!*\
  !*** ./src/lib/apiGateway.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageGenerationGateway: () => (/* binding */ ImageGenerationGateway),\n/* harmony export */   imageGateway: () => (/* binding */ imageGateway)\n/* harmony export */ });\n// 基础提示词模板\nconst BASE_PROMPT = `Create a clean black outline coloring page with the following characteristics:\n- Only simple black lines on white background\n- No shading, grayscale, or color\n- Clear distinct lines suitable for coloring\n- Clean and minimalist design\n- No text or labels\n- Perfect for printing and coloring with crayons or markers\nSubject: `;\n// 负面提示词\nconst NEGATIVE_PROMPT = \"photo, realistic, shading, grayscale, gradient, 3d, color, watercolor, painting, crosshatching, complex texture, busy background\";\n// SiliconFlow提供商实现\nclass SiliconFlowProvider {\n    constructor(){\n        this.apiKey = process.env.SILICONFLOW_API_KEY || \"\";\n        this.apiUrl = process.env.SILICONFLOW_API_URL || \"https://api.siliconflow.cn/v1/images/generations\";\n        this.model = process.env.SILICONFLOW_MODEL || \"black-forest-labs/FLUX.1-schnell\";\n    }\n    buildPrompt(request) {\n        let prompt = `${BASE_PROMPT}${request.prompt}`;\n        // 添加风格修饰词\n        const styleModifiers = {\n            cartoon: \"in a fun cartoon style, with simple clean lines\",\n            realistic: \"with realistic proportions but still as a line drawing\",\n            anime: \"in anime/manga style, with clean outlines\",\n            watercolor: \"in a flowing watercolor outline style\"\n        };\n        if (request.style && styleModifiers[request.style]) {\n            prompt += \", \" + styleModifiers[request.style];\n        }\n        // 添加复杂度修饰词\n        const complexityModifiers = {\n            simple: \"with very simple shapes and minimal details, perfect for young children\",\n            medium: \"with moderate level of detail\",\n            complex: \"with intricate details and more complex elements\"\n        };\n        if (request.complexity && complexityModifiers[request.complexity]) {\n            prompt += \", \" + complexityModifiers[request.complexity];\n        }\n        return prompt;\n    }\n    async generateImage(request) {\n        try {\n            const prompt = this.buildPrompt(request);\n            // 准备API请求参数\n            const payload = {\n                model: this.model,\n                prompt,\n                negative_prompt: NEGATIVE_PROMPT,\n                num_inference_steps: 30,\n                guidance_scale: 7.5,\n                size: request.size === \"large\" ? 1024 : request.size === \"small\" ? 512 : 768\n            };\n            // 调用SiliconFlow API\n            const response = await fetch(this.apiUrl, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${this.apiKey}`\n                },\n                body: JSON.stringify(payload)\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || \"Failed to generate image\");\n            }\n            const data = await response.json();\n            return {\n                jobId: data.id || data.task_id || \"\",\n                imageUrl: data.data?.[0]?.url\n            };\n        } catch (error) {\n            return {\n                jobId: \"\",\n                error: error instanceof Error ? error.message : \"Failed to generate image\"\n            };\n        }\n    }\n    async getStatus(jobId) {\n        try {\n            const response = await fetch(`${this.apiUrl}/tasks/${jobId}`, {\n                headers: {\n                    \"Authorization\": `Bearer ${this.apiKey}`\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to get status\");\n            }\n            const data = await response.json();\n            // 映射API响应状态到我们的状态\n            const statusMap = {\n                \"pending\": \"pending\",\n                \"processing\": \"processing\",\n                \"succeeded\": \"completed\",\n                \"failed\": \"failed\"\n            };\n            const status = statusMap[data.status] || \"failed\";\n            return {\n                status,\n                progress: data.progress || 0,\n                result: data.result?.url,\n                error: data.error\n            };\n        } catch (error) {\n            return {\n                status: \"failed\",\n                progress: 0,\n                error: error instanceof Error ? error.message : \"Failed to check status\"\n            };\n        }\n    }\n}\n// API Gateway类\nclass ImageGenerationGateway {\n    constructor(){\n        this.providers = new Map();\n        this.defaultProvider = \"siliconflow\";\n        // 注册提供商\n        this.providers.set(\"siliconflow\", new SiliconFlowProvider());\n    // 可以添加更多提供商\n    }\n    async generateImage(request) {\n        const provider = this.providers.get(this.defaultProvider);\n        if (!provider) {\n            throw new Error(\"No image generation provider available\");\n        }\n        return provider.generateImage(request);\n    }\n    async getJobStatus(jobId) {\n        const provider = this.providers.get(this.defaultProvider);\n        if (!provider) {\n            throw new Error(\"No image generation provider available\");\n        }\n        return provider.getStatus(jobId);\n    }\n    // 切换提供商\n    setProvider(providerName) {\n        if (this.providers.has(providerName)) {\n            this.defaultProvider = providerName;\n            return true;\n        }\n        return false;\n    }\n}\n// 创建单例实例\nconst imageGateway = new ImageGenerationGateway();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/apiGateway.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/imageProcessing.ts":
/*!************************************!*\
  !*** ./src/lib/imageProcessing.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeColoringPageQuality: () => (/* binding */ analyzeColoringPageQuality),\n/* harmony export */   assessImageQuality: () => (/* binding */ assessImageQuality),\n/* harmony export */   enhancePrompt: () => (/* binding */ enhancePrompt),\n/* harmony export */   getCategoryNegativePrompts: () => (/* binding */ getCategoryNegativePrompts),\n/* harmony export */   getOptimalSeedRange: () => (/* binding */ getOptimalSeedRange),\n/* harmony export */   getOptimizedParams: () => (/* binding */ getOptimizedParams),\n/* harmony export */   getSuggestedPromptEnhancements: () => (/* binding */ getSuggestedPromptEnhancements),\n/* harmony export */   optimizeImage: () => (/* binding */ optimizeImage),\n/* harmony export */   recursivePromptOptimization: () => (/* binding */ recursivePromptOptimization)\n/* harmony export */ });\n/**\n * Image Processing Service for Coloring Pages\n * \n * This service handles image optimization specifically for coloring pages\n * - Ensures clean black outlines on white background\n * - Optimizes for printing\n * - Provides image analysis and enhancement\n */ /**\n * Image processing utility functions for AI coloring page generation\n */ /**\n * Get optimal seed range for specific content types\n * Different seed ranges produce better results for different content types\n */ function getOptimalSeedRange(category) {\n    const seedRanges = {\n        animals: [\n            120000,\n            140000\n        ],\n        nature: [\n            140000,\n            160000\n        ],\n        fantasy: [\n            160000,\n            180000\n        ],\n        vehicles: [\n            180000,\n            200000\n        ],\n        patterns: [\n            200000,\n            220000\n        ],\n        default: [\n            100000,\n            999999\n        ]\n    };\n    return seedRanges[category] || seedRanges.default;\n}\n/**\n * Get optimized parameters for specific image types\n */ function getOptimizedParams(complexity) {\n    const baseParams = {\n        num_inference_steps: 30,\n        guidance_scale: 7.5\n    };\n    const complexityParams = {\n        simple: {\n            num_inference_steps: 28,\n            guidance_scale: 7.0\n        },\n        medium: baseParams,\n        detailed: {\n            num_inference_steps: 32,\n            guidance_scale: 8.2\n        }\n    };\n    return complexityParams[complexity] || baseParams;\n}\n/**\n * Get category-specific negative prompts to improve generation quality\n */ function getCategoryNegativePrompts(category) {\n    const baseNegative = \"photo, realistic, shading, grayscale, gradient, 3d, color, watercolor, painting, crosshatching, complex texture, busy background\";\n    const categoryNegatives = {\n        animals: `${baseNegative}, human, people, text, realistic fur, realistic eyes`,\n        nature: `${baseNegative}, people, buildings, vehicles, complex patterns`,\n        fantasy: `${baseNegative}, realistic, modern, urban, technical`,\n        vehicles: `${baseNegative}, organic shapes, people, animals, nature`,\n        patterns: `${baseNegative}, specific objects, scenes, figures`,\n        default: baseNegative\n    };\n    return categoryNegatives[category] || categoryNegatives.default;\n}\n/**\n * Get suggested prompt enhancements based on user input\n */ function getSuggestedPromptEnhancements(userPrompt) {\n    const suggestions = [];\n    // Check for common improvement opportunities\n    if (userPrompt.length < 10) {\n        suggestions.push(\"Add more details to your description for better results\");\n    }\n    if (!userPrompt.toLowerCase().includes(\"background\")) {\n        suggestions.push(\"Consider describing the background or setting\");\n    }\n    if (!userPrompt.match(/position|pose|standing|sitting/i)) {\n        suggestions.push(\"Specify the position or pose of the main subject\");\n    }\n    // Add general suggestions if no specific ones were found\n    if (suggestions.length === 0) {\n        suggestions.push(\"Try adding adjectives to describe the mood or style\");\n        suggestions.push(\"Consider specifying the perspective (e.g., front view, side view)\");\n    }\n    return suggestions;\n}\n// Function to determine if an image has good contrast for coloring\nfunction analyzeColoringPageQuality(imageData) {\n    // This would normally use canvas and image processing libraries\n    // For demonstration, we're providing a simulated analysis\n    // In a real implementation, this would:\n    // 1. Measure the contrast between lines and background\n    // 2. Check for presence of grayscale elements (should be pure black/white)\n    // 3. Analyze line thickness and consistency\n    // 4. Evaluate balance of white space vs. coloring areas\n    // Simulated score between 0-100\n    const score = 85;\n    const feedback = [\n        \"Good contrast between lines and background\",\n        \"Clean black outlines detected\",\n        \"Appropriate line thickness for coloring\",\n        \"Good balance of detail and open spaces\"\n    ];\n    return {\n        score,\n        feedback\n    };\n}\n// 提示词增强引擎\nfunction enhancePrompt(basePrompt, category) {\n    const styleModifiers = {\n        animals: \"(lineart:1.2), (clean lines:1.1), (single line thickness:1.05), simplified animal drawing\",\n        nature: \"(lineart:1.2), (clean lines:1.1), (botanical illustration:1.05)\",\n        fantasy: \"(lineart:1.2), (clean lines:1.1), (storybook illustration:1.05)\",\n        vehicles: \"(lineart:1.2), (clean lines:1.1), (technical drawing:1.05)\",\n        patterns: \"(lineart:1.2), (clean lines:1.1), (geometric pattern:1.05)\",\n        default: \"(lineart:1.2), (clean lines:1.1), (single line thickness:1.05)\"\n    };\n    return `${basePrompt} ${styleModifiers[category] || styleModifiers.default}`;\n}\n// 图像后处理优化\nasync function optimizeImage(imageData) {\n    // 这里将来可以添加实际的图像处理逻辑\n    // 例如：边缘检测、背景纯白化、线条黑化等\n    return imageData;\n}\n// 递归提示优化\nfunction recursivePromptOptimization(basePrompt, previousResults, attempts = 0) {\n    const maxAttempts = 3;\n    if (attempts >= maxAttempts) {\n        return basePrompt;\n    }\n    // 基于之前的结果调整提示词\n    let optimizedPrompt = basePrompt;\n    if (previousResults.length > 0) {\n        // 这里可以添加基于之前结果的优化逻辑\n        optimizedPrompt += \" (high quality:1.2), (clear lines:1.1)\";\n    }\n    return optimizedPrompt;\n}\n// 图像质量评估\nfunction assessImageQuality(imageData) {\n    return new Promise((resolve)=>{\n        // 这里将来可以添加实际的质量评估逻辑\n        // 返回0-10的质量分数\n        resolve(8.5);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/imageProcessing.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/queue.ts":
/*!**************************!*\
  !*** ./src/lib/queue.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageGenerationQueue: () => (/* binding */ ImageGenerationQueue),\n/* harmony export */   imageQueue: () => (/* binding */ imageQueue)\n/* harmony export */ });\n/* harmony import */ var _apiGateway__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./apiGateway */ \"(rsc)/./src/lib/apiGateway.ts\");\n\n// 内存队列实现（可以替换为Redis或其他持久化存储）\nclass ImageGenerationQueue {\n    constructor(maxConcurrent = 3){\n        this.queue = new Map();\n        this.processing = new Set();\n        this.maxConcurrent = maxConcurrent;\n    }\n    // 添加任务到队列\n    async addTask(request) {\n        const id = `job-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        const item = {\n            id,\n            request,\n            status: \"pending\",\n            progress: 0,\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        this.queue.set(id, item);\n        this.processQueue();\n        return id;\n    }\n    // 获取任务状态\n    async getStatus(id) {\n        return this.queue.get(id) || null;\n    }\n    // 更新任务状态\n    async updateStatus(id, status, progress, result, error) {\n        const item = this.queue.get(id);\n        if (item) {\n            item.status = status;\n            item.progress = progress;\n            item.result = result;\n            item.error = error;\n            item.updatedAt = new Date();\n        }\n    }\n    // 处理队列\n    async processQueue() {\n        if (this.processing.size >= this.maxConcurrent) {\n            return;\n        }\n        // 使用 Array.from 来避免 Map 迭代器的类型错误\n        const entries = Array.from(this.queue.entries());\n        for (const [id, item] of entries){\n            if (item.status === \"pending\" && !this.processing.has(id)) {\n                this.processing.add(id);\n                this.processTask(id, item).finally(()=>{\n                    this.processing.delete(id);\n                    this.processQueue();\n                });\n            }\n        }\n    }\n    // 处理单个任务\n    async processTask(id, item) {\n        try {\n            await this.updateStatus(id, \"processing\", 0);\n            // 调用 SiliconFlow API 生成图像\n            const response = await _apiGateway__WEBPACK_IMPORTED_MODULE_0__.imageGateway.generateImage(item.request);\n            if (response.error) {\n                throw new Error(response.error);\n            }\n            // 更新进度为50%，表示图像生成已开始\n            await this.updateStatus(id, \"processing\", 50);\n            // 等待并检查任务状态\n            let retries = 0;\n            const maxRetries = 30; // 最多等待60秒\n            while(retries < maxRetries){\n                const status = await _apiGateway__WEBPACK_IMPORTED_MODULE_0__.imageGateway.getJobStatus(response.jobId);\n                if (status.status === \"completed\") {\n                    await this.updateStatus(id, \"completed\", 100, status.result);\n                    break;\n                } else if (status.status === \"failed\") {\n                    throw new Error(status.error || \"Image generation failed\");\n                }\n                // 更新进度\n                await this.updateStatus(id, \"processing\", 50 + (status.progress || 0) * 0.5);\n                // 等待2秒后再次检查\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n                retries++;\n            }\n            if (retries >= maxRetries) {\n                throw new Error(\"Image generation timed out\");\n            }\n        } catch (error) {\n            await this.updateStatus(id, \"failed\", 0, undefined, error instanceof Error ? error.message : String(error));\n        }\n    }\n    // 清理已完成的任务\n    async cleanup(maxAge = 24 * 60 * 60 * 1000) {\n        const now = new Date();\n        // 使用 Array.from 来避免 Map 迭代器的类型错误\n        const entries = Array.from(this.queue.entries());\n        for (const [id, item] of entries){\n            if (item.status === \"completed\" && now.getTime() - item.updatedAt.getTime() > maxAge) {\n                this.queue.delete(id);\n            }\n        }\n    }\n}\n// 创建单例实例\nconst imageQueue = new ImageGenerationQueue();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/queue.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate%2Froute&page=%2Fapi%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Froute.ts&appDir=%2FUsers%2Fbruno2025%2FDocuments%2FiProjects%2Fcoloringpage%2Fcoloringpage%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbruno2025%2FDocuments%2FiProjects%2Fcoloringpage%2Fcoloringpage&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();